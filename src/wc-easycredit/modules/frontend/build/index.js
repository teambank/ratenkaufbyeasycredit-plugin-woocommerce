(()=>{"use strict";var __webpack_modules__={586:()=>{eval('\n;// CONCATENATED MODULE: ./src/utils.ts\nconst watchForSelector = function (selector, cb) {\n  const observer = new MutationObserver(function (mutations) {\n    mutations.forEach(function (mutation) {\n      mutation.addedNodes.forEach(function (node) {\n        if (node.nodeType !== Node.ELEMENT_NODE) {\n          return;\n        }\n        if (!(node instanceof HTMLElement)) {\n          return;\n        }\n        if (node.tagName === selector.toUpperCase()) {\n          return cb(node);\n        }\n        const el = node.querySelector(selector);\n        if (el) {\n          return cb(el);\n        }\n      });\n    });\n  });\n  observer.observe(document, {\n    subtree: true,\n    childList: true\n  });\n};\nasync function waitForComponentReady(selector) {\n  const isHydrated = component => {\n    return component instanceof HTMLElement && component.classList.contains("hydrated");\n  };\n  return new Promise(resolve => {\n    let component = document.querySelector(selector);\n    if (component === null) {\n      return;\n    }\n    if (isHydrated(component)) {\n      return resolve(component);\n    }\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type !== "attributes") {\n          return;\n        }\n        component = document.querySelector(selector);\n        if (isHydrated(component)) {\n          observer.disconnect();\n          return resolve(component);\n        }\n      });\n    });\n    observer.observe(component, {\n      attributes: true\n    });\n  });\n}\n\n/*\nexport async function waitForComponentReady(\n\tcomponent: HTMLElement,\n): Promise<void> {\n\treturn new Promise((resolve) => {\n\t\tconst checkHydrated = () => {\n\t\t\tif (\n\t\t\t\tcomponent.shadowRoot &&\n\t\t\t\tcomponent.shadowRoot?.childNodes.length > 0\n\t\t\t) {\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\tsetTimeout(checkHydrated, 100); // Check again in 100ms\n\t\t\t}\n\t\t};\n\t\tcheckHydrated();\n\t});\n}\n*/\n\nconst replicateForm = (buyForm, additionalData) => {\n  if (!(buyForm instanceof HTMLFormElement)) {\n    return false;\n  }\n  const action = buyForm.getAttribute("action");\n  const method = buyForm.getAttribute("method");\n  if (!action || !method) {\n    return false;\n  }\n  const form = document.createElement("form");\n  form.setAttribute("action", action);\n  form.setAttribute("method", method);\n  form.style.display = "none";\n  const formData = new FormData(buyForm);\n  for (const [key, value] of Object.entries(additionalData)) {\n    formData.set(key, value);\n  }\n  for (const key of formData.keys()) {\n    const field = document.createElement("input");\n    field.setAttribute("type", "hidden");\n    field.setAttribute("name", key);\n    field.setAttribute("value", formData.get(key)); // TypeScript type assertion\n    form.appendChild(field);\n  }\n  document.body.appendChild(form);\n  return form;\n};\nconst waitForLoadEvent = () => {\n  return new Promise(resolve => {\n    window.addEventListener("load", () => {\n      resolve();\n    });\n  });\n};\n;// CONCATENATED MODULE: ./src/express.ts\n\nconst buildAdditionalParams = detail => {\n  let additional = {};\n  detail.express = "1";\n  for (let [key, value] of Object.entries(detail)) {\n    additional["easycredit[" + key + "]"] = value;\n  }\n  return additional;\n};\nconst submitExpressForm = function (e) {\n  let form;\n  const target = e.target;\n\n  // product detail page: get add to cart form\n  const summary = target.closest(".summary");\n  if (summary instanceof HTMLElement) {\n    form = summary.querySelector("form.cart");\n  }\n\n  // cart page: get add to cart form\n  if (!form) {\n    form = document.querySelector("form.cart");\n  }\n\n  // cart page (classic shortcode): get add to cart form\n  if (!form) {\n    form = document.querySelector("form.woocommerce-cart-form");\n  }\n  if (!(form instanceof HTMLFormElement)) {\n    return;\n  }\n  const additional = buildAdditionalParams(e.detail);\n  const addToCartButton = form.querySelector(\'button[name="add-to-cart"], button.single_add_to_cart_button\');\n  if (addToCartButton) {\n    if (addToCartButton.getAttribute("value")) {\n      additional["add-to-cart"] = addToCartButton.getAttribute("value");\n    }\n    let replicatedForm;\n    if (replicatedForm = replicateForm(form, additional)) {\n      replicatedForm.submit();\n    }\n    return;\n  }\n\n  // cart page: submit\n  if (target.closest(".wc-proceed-to-checkout") && target.dataset.url) {\n    const params = new URLSearchParams(additional).toString();\n    window.location.href = target.dataset.url + "?" + params;\n    return;\n  }\n  window.alert("Die Express-Zahlung mit easyCredit konnte nicht gestartet werden.");\n  console.error("easyCredit payment could not be started. Please check the integration.");\n};\nconst handleVariationSwitch = () => {\n  const forms = document.querySelectorAll("form.variations_form");\n  forms.forEach(form => {\n    form.addEventListener("show_variation", function (event) {\n      if (!(event instanceof CustomEvent)) {\n        return;\n      }\n      const variation = event.detail;\n      const button = document.querySelector("easycredit-express-button");\n      if (!(button instanceof HTMLElement)) {\n        return;\n      }\n      button.style.display = "block";\n      button.setAttribute("amount", variation && variation.is_in_stock ? variation.display_price : 1);\n    });\n    form.addEventListener("hide_variation", function () {\n      const button = document.querySelector("easycredit-express-button");\n      if (!(button instanceof HTMLElement)) {\n        return;\n      }\n      button.style.display = "none";\n    });\n  });\n};\nconst handleExpressButton = async element => {\n  /*\n  if (\n  \telement.closest(".wc-block-components-express-payment")\n  ) {\n  \treturn;\n  }\n  */\n  document.body.addEventListener("submit", e => {\n    if (e instanceof CustomEvent && e.target && e.target.tagName === "EASYCREDIT-EXPRESS-BUTTON") {\n      e.preventDefault();\n      submitExpressForm(e);\n    }\n  }, true);\n  handleVariationSwitch();\n};\n;// CONCATENATED MODULE: ./src/checkout.ts\n/* eslint-env jquery */\nconst submitCheckoutForm = e => {\n  const form = e.target.closest("form");\n  if (!(form instanceof HTMLFormElement)) {\n    return;\n  }\n  const inputs = [{\n    name: "easycredit[submit]",\n    value: "1"\n  }, {\n    name: "terms",\n    value: "On"\n  }, {\n    name: "legal",\n    value: "On"\n  }];\n  if (e.detail && e.detail.numberOfInstallments) {\n    inputs.push({\n      name: "easycredit[number-of-installments]",\n      value: e.detail.numberOfInstallments\n    });\n  }\n  inputs.forEach(input => {\n    const hiddenInput = document.createElement("input");\n    hiddenInput.type = "hidden";\n    hiddenInput.name = input.name;\n    hiddenInput.value = input.value;\n    form.appendChild(hiddenInput);\n  });\n  jQuery(form).submit(); // we need jQuery here, because wooCommerce listens for the custom submit event\n};\nconst getComponent = paymentType => {\n  return document.querySelector(\'easycredit-checkout[payment-type="\' + paymentType + \'"]\');\n};\nconst handleCheckout = checkout => {\n  document.body.addEventListener("submit", e => {\n    if (e instanceof CustomEvent && e.target && e.target.tagName === "EASYCREDIT-CHECKOUT") {\n      e.preventDefault();\n      submitCheckoutForm(e);\n    }\n  }, true);\n  checkout.addEventListener("change", event => {\n    const billingCompany = event.target;\n    if (billingCompany instanceof Element && billingCompany && billingCompany.closest(".woocommerce-billing-fields")) {\n      jQuery(billingCompany).trigger("update_checkout");\n    }\n  });\n};\nconst handleCheckoutMethods = (checkout, paymentMethod, paymentType) => {\n  const $checkout = jQuery(checkout);\n  $checkout.on("checkout_place_order_" + paymentMethod, () => {\n    const component = getComponent(paymentType);\n    if (component.style.display === "none" ||\n    // Check if the component is not visible\n    !component.isActive ||\n    // Check if the component is not active\n    component.paymentPlan ||\n    // Check if the component has a payment plan\n    component.alert !== "" // Check if the component\'s alert is not an empty string\n    ) {\n      return true;\n    }\n    if (checkout.querySelector(\'input[name="easycredit[submit]"]\')) {\n      return true;\n    }\n    component.scrollIntoView({\n      behavior: "smooth"\n    });\n    if (paymentType === \'INSTALLMENT\') {\n      component.dispatchEvent(new Event("openModal"));\n    }\n    return false;\n  });\n  if (paymentType === \'INSTALLMENT\') {\n    jQuery(document.body).on(\'checkout_error\', () => {\n      getComponent(paymentType).dispatchEvent(new Event("closeModal"));\n    });\n  }\n};\n;// CONCATENATED MODULE: ./src/marketing.ts\nconst styleCardListing = () => {\n  const card = document.querySelector("easycredit-box-listing.easycredit-box-listing-adjusted");\n  if (!card || !(card instanceof HTMLElement) || !card.parentElement) {\n    return;\n  }\n  const siblings = [...card.parentElement.children].filter(c => c !== card);\n  const siblingsCard = siblings[0];\n  const cardWidth = siblingsCard.clientWidth;\n  const cardHeight = siblingsCard.clientHeight;\n  const cardClasses = siblingsCard.className;\n  card.style.width = cardWidth + "px";\n  card.style.height = cardHeight + "px";\n  card.style.visibility = "hidden";\n  card.className = card.className + " " + cardClasses;\n  if (siblingsCard.tagName === "LI") {\n    card.style.display = "list-item";\n    card.style.listStyle = "none";\n    if (card.parentElement.tagName === "UL") {\n      card.parentElement.className = card.parentElement.className + " easycredit-card-columns-adjusted";\n    }\n  }\n};\nconst styleCardListingHydrated = async () => {\n  await customElements.whenDefined("easycredit-box-listing");\n  const card = document.querySelector("easycredit-box-listing.easycredit-box-listing-adjusted");\n  if (!(card instanceof HTMLElement) || !card.shadowRoot) {\n    return;\n  }\n  card.style.visibility = "";\n  const listing = card.shadowRoot.querySelector(".ec-box-listing");\n  if (listing instanceof HTMLElement) {\n    listing.style.maxWidth = "100%";\n    listing.style.height = "100%";\n  }\n  const listingImage = card.shadowRoot.querySelector(".ec-box-listing__image");\n  if (listingImage instanceof HTMLElement) {\n    listingImage.style.minHeight = "100%";\n  }\n};\nconst positionCardInListing = () => {\n  const card = document.querySelector("easycredit-box-listing");\n  if (!(card instanceof HTMLElement) || !card.parentElement) {\n    return;\n  }\n  const siblings = [...card.parentElement.children].filter(c => c !== card);\n  const position = card.getAttribute("position");\n  const previousPosition = position ? Number(position) - 1 : 0;\n  const appendAfterPosition = previousPosition ? Number(position) - 2 : 0;\n  if (!position || previousPosition <= 0) {\n    return;\n  }\n  if (siblings[appendAfterPosition]) {\n    siblings[appendAfterPosition].after(card);\n  } else {\n    card.parentElement.append(card);\n  }\n};\nconst handleMarketingComponents = async () => {\n  await styleCardListing();\n  await styleCardListingHydrated();\n  await positionCardInListing();\n};\n;// CONCATENATED MODULE: ./src/widget.ts\nconst getMeta = (key, container = null, element = null) => {\n  let meta;\n  if (container === null) {\n    container = document;\n  }\n  const selector = "meta[name=easycredit-" + key + "]";\n  if (element instanceof HTMLElement) {\n    let box;\n    if (box = element.closest("li.product")) {\n      if (meta = box.querySelector(selector)) {\n        return meta.content;\n      }\n    }\n  }\n  if (meta = container.querySelector(selector)) {\n    return meta.content;\n  }\n  return null;\n};\nconst processSelector = selector => {\n  const regExp = /(.+) easycredit-widget(\\[.+?\\])$/;\n  let match;\n  if (match = selector.match(regExp)) {\n    const attributes = match[2].split("]").map(item => item.slice(1).split("=")).filter(([k, v]) => k).reduce((acc, [k, v]) => ({\n      ...acc,\n      [k]: v\n    }), {});\n    return {\n      selector: match[1],\n      attributes: attributes\n    };\n  }\n  return {\n    selector: selector\n  };\n};\nconst applyWidget = (container, element, attributes) => {\n  let amount = getMeta("amount", container, element);\n  if (null === amount || isNaN(amount)) {\n    const priceContainer = element.parentNode;\n    amount = priceContainer && priceContainer.querySelector("[itemprop=price]") ? priceContainer.querySelector("[itemprop=price]").content : null;\n  }\n  if (null === amount || isNaN(amount)) {\n    return;\n  }\n  let widget = document.createElement("easycredit-widget");\n  widget.setAttribute("webshop-id", getMeta("api-key"));\n  widget.setAttribute("amount", amount);\n  widget.setAttribute("payment-types", getMeta(\'payment-types\'));\n  if (attributes) {\n    for (const [name, value] of Object.entries(attributes)) {\n      widget.setAttribute(name, value);\n    }\n  }\n  element.appendChild(widget);\n};\nconst handleWidget = () => {\n  const selector = getMeta(\'widget-selector\');\n  const apiKey = getMeta(\'api-key\');\n  if (!selector || !apiKey) {\n    return;\n  }\n  let processedSelector = processSelector(selector);\n  let elements = document.querySelectorAll(processedSelector.selector);\n  elements.forEach(element => {\n    applyWidget(document, element, processedSelector.attributes);\n  });\n};\n\n/*\n    const widget = document.createElement("easycredit-widget");\n    widget.setAttribute(\n        "webshop-id",\n        apiKey,\n    );\n    widget.setAttribute(\n        "amount",\n        amount,\n    );\n\n    const widgets = document.querySelectorAll(selector);\n    for (let i = 0; i < widgets.length; i++) {\n        const el = widgets[i];\n        if (\n            el instanceof HTMLElement &&\n            el.parentNode &&\n            window.getComputedStyle(el).visibility !== "hidden" &&\n            el.style.opacity !== "0"\n        ) {\n            el.parentNode.insertBefore(widget.cloneNode(true), el.nextSibling);\n            break;\n        }\n    }\n\n    const variationsForm = document.querySelector("form.variations_form")\n    if (!variationsForm) {\n        return\n    }\n    variationsForm.addEventListener("show_variation", function (event) {\n        if (!(event instanceof CustomEvent)) {\n            return\n        }\n\n        const variation = event.detail;\n        if (variation && variation.display_price) {\n            widget.setAttribute("amount", variation.display_price);\n        }\n    }); \n}\n\n\n\n\tinitWidget(container) {\n\t\tconst selector = this.getMeta("widget-selector", container);\n\t\tif (selector === null) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.getMeta("api-key") === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet processedSelector = this.processSelector(selector);\n\n\t\tlet elements = container.querySelectorAll(processedSelector.selector);\n\t\telements.forEach((element) => {\n\t\t\tthis.applyWidget(container, element, processedSelector.attributes);\n\t\t});\n\t}\n\n\n\tgetMeta(key, container = null, element = null) {\n\t\tlet meta;\n\n\t\tif (container === null) {\n\t\t\tcontainer = document;\n\t\t}\n\n\t\tconst selector = "meta[name=easycredit-" + key + "]";\n\n\t\tif (element) {\n\t\t\tlet box;\n\t\t\tif ((box = element.closest(".cms-listing-col"))) {\n\t\t\t\tif ((meta = box.querySelector(selector))) {\n\t\t\t\t\treturn meta.content;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ((meta = container.querySelector(selector))) {\n\t\t\treturn meta.content;\n\t\t}\n\t\treturn null;\n\t}\n}\n    */\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\nconst methods = {\n  easycredit_ratenkauf: "INSTALLMENT",\n  easycredit_rechnung: "BILL"\n};\n(async () => {\n  await waitForLoadEvent();\n  handleExpressButton(document.querySelector("easycredit-express-button"));\n})();\n(async () => {\n  await waitForLoadEvent();\n  const wooCommerceCheckout = document.querySelector("form.woocommerce-checkout");\n  if (!wooCommerceCheckout) {\n    return;\n  }\n  handleCheckout(wooCommerceCheckout);\n  for (const [paymentMethod, paymentType] of Object.entries(methods)) {\n    handleCheckoutMethods(wooCommerceCheckout, paymentMethod, paymentType);\n  }\n})();\n(async () => {\n  await waitForLoadEvent();\n  handleMarketingComponents();\n})();\n(async () => {\n  await waitForLoadEvent();\n  handleWidget();\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///586\n')}},__webpack_exports__={};__webpack_modules__[586]()})();